{
  "name": "bloody-class",
  "repository": {
    "type": "git",
    "url": "https://github.com/bloodyowl/class.git"
  },
  "issues": "https://github.com/bloodyowl/class/issues",
  "author": {
    "name": "bloodyowl"
  },
  "version": "1.2.2",
  "scripts": {
    "test": "tape test/*.js"
  },
  "devDependencies": {
    "tape": "~2.3.2"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": {
      "ie": [
        6,
        7,
        8,
        9
      ],
      "firefox": [
        22,
        23,
        24,
        25
      ],
      "chrome": [
        28,
        29,
        30,
        31
      ],
      "safari": [
        4,
        5.1,
        6
      ],
      "opera": [
        10,
        11,
        12
      ],
      "iphone": [
        6
      ],
      "ipad": [
        6
      ],
      "android-browser": [
        4.2
      ]
    }
  },
  "bugs": {
    "url": "https://github.com/bloodyowl/class/issues"
  },
  "homepage": "https://github.com/bloodyowl/class",
  "main": "index.js",
  "dependencies": {
    "bloody-collections": "^0.6.0"
  },
  "license": "MIT",
  "readme": "## class\n\n[![browser support](https://ci.testling.com/bloodyowl/class.png)](https://ci.testling.com/bloodyowl/class)\n\n### Install \n\n```\n$ npm install bloody-class\n```\n\nWith [component(1)](http://component.io):\n\n```\n$ component install bloodyowl/class\n```\n\n### Require\n\n```javascript\nvar klass = require(\"class\")\n```\n\n### Definition \n\nClasses are objects that contain inherits for instances. \nYou can extend and create instances of an existing class. \nClasses are based on prototypal inheritance, that way, you can easily update all subclasses and instances from one of their parent class. \n\n### Methods\n\n#### `klass.extend([object])` -> `newClass`\n\nCreates a new class that inherits from `klass`. Optionaly takes an `object` arguments that extends the `newClass` as owned properties. \n\n#### `klass.create([args …])` -> `newInstance`\n\nCreates a new instance that inherits from `klass`. Its arguments are passed to `klass.constructor` which is called if `klass` owns a `constructor` method. \n\n#### `instance.destroy([args …])` \n\nRemoves all the internal references to `instance`, as in `parent.instances` for instance. Its arguments are passed to `klass.destructor` which is called if `klass` owns a `destructor` method. \n\n### Usage\n\n```javascript\n// create a class\nvar myClass = klass.extend({\n  // constructor is the method called when an instance is created\n  constructor : function(args/* …*/){ \n    // this -> instance\n    // args … -> arguments passed through the `.create` method\n  }, \n  destructor : function(){\n    // this -> instance\n    // args … -> arguments passed through the `.destroy` method\n  }\n})\n\n// myClass has a \"_klass\" property with a uniq integer\nmyClass._klass // -> integer\n\n// create an instance\nvar myInstance = myClass.create()\n\n// myInstance has a \"_id\" property with a uniq integer (relative to its parent class)\nmyInstance._id // -> integer\n\n// instance is in myClass._instances and myInstance._instances\neach(myClass._instances, console.log, console)\n// > logs [myInstance, \"0\", myClass._instances]\n\n// destroy an instance\nmyInstance.destroy()\n\n// instance is now removed from myClass._instances\neach(myClass._instances, console.log, console)\n// > doesn't log anything\n\n// and wipe it out\nmyInstance = null\n```\n",
  "readmeFilename": "README.md",
  "description": "[![browser support](https://ci.testling.com/bloodyowl/class.png)](https://ci.testling.com/bloodyowl/class)",
  "_id": "bloody-class@1.2.2",
  "_from": "bloody-class@"
}
